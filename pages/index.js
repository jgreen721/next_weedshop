import Head from "next/head";
// import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import styles from "../styles/Home.module.css";
import { motion, AnimatePresence } from "framer-motion";
import { FaGithub } from "react-icons/fa";
import { auth } from "../firebase";
import {
  GithubAuthProvider,
  signInWithEmailAndPassword,
  signInWithPopup,
} from "firebase/auth";

const fullDrop = {
  initial: {
    translateY: "-800px",
  },
  animate: {
    translateY: "0px",
    transition: {
      duration: 2,
      ease: "easeInOut",
      // delay: 1,
    },
  },
  goodbye: {
    translateY: "600px",
    transition: {
      duration: 2,
      ease: "easeInOut",
    },
  },
};

const fullDrop2 = {
  initial: {
    translateY: "-800px",
  },
  animate: {
    translateY: "0px",
    transition: {
      duration: 2,
      ease: "easeInOut",
      delay: 2,
    },
  },
  goodbye: {
    translateY: "600px",
    transition: {
      duration: 2,
      ease: "easeInOut",
    },
  },
};

export default function Home() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [showReg, setShowReg] = useState(false);
  const weedRefOne = useRef();
  const weedRefTwo = useRef();
  const router = useRouter();

  useEffect(() => {
    weedRefOne.current.classList.add("show_img");
    weedRefTwo.current.classList.add("show_img");
    console.log("added clases", weedRefOne.current);
  }, []);

  useEffect(() => {
    let token = localStorage.token;
    if (token) {
      console.log("user has saved session");
      router.push("/weeds");
    }
    console.log("no session");
  }, []);

  const handleLogin = (e) => {
    e.preventDefault();
    console.log("login fired!");
    fetch("http://localhost:3000/api/signin", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    })
      .then((res) => res.json())
      .then((res) => {
        console.log(res);
      });
  };

  const handleRegister = (e) => {
    e.preventDefault();
    console.log("handleRegister fired!");
    fetch("http://localhost:3000/api/signin", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    })
      .then((res) => res.json())
      .then((res) => {
        console.log(res);
      });
  };
  accessToken: "eyJhbGciOiJSUzI1NiIsImtpZCI6ImVmMzAxNjFhOWMyZGI3ODA5ZjQ1MTNiYjRlZDA4NzNmNDczMmY3MjEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiSnVzdGluIEdyZWVuIiwicGljdHVyZSI6Imh0dHBzOi8vYXZhdGFycy5naXRodWJ1c2VyY29udGVudC5jb20vdS85MDk4NzQ1MD92PTQiLCJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vZmlyLWNsaS0yODI3OSIsImF1ZCI6ImZpci1jbGktMjgyNzkiLCJhdXRoX3RpbWUiOjE2NTE2OTg5MTUsInVzZXJfaWQiOiJBYk5BOWZVZEZ2U0VsRm5hQ0dwZmZ0UFJlTGgyIiwic3ViIjoiQWJOQTlmVWRGdlNFbEZuYUNHcGZmdFBSZUxoMiIsImlhdCI6MTY1MTY5ODkxNSwiZXhwIjoxNjUxNzAyNTE1LCJlbWFpbCI6Imp1c3RuZ3JlZW43MjFAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImdpdGh1Yi5jb20iOlsiOTA5ODc0NTAiXSwiZW1haWwiOlsianVzdG5ncmVlbjcyMUBnbWFpbC5jb20iXX0sInNpZ25faW5fcHJvdmlkZXIiOiJnaXRodWIuY29tIn19.I6iDbgzqy9o3md0e9NVETeXUIxHL4FFUDOOGXEH1BCGe_eYLAcQfwScct6sc2tzfcn_zt7u0nvSgxtz4dnj6BbxeZ36PeaRUMg0NCm9Zi5GgcwZ5im7SHkKUrREUMhiZ0OYA96WefHBqBIJSnK8Vz-b16emQvzqs90VOZLJy1GdA1sFkvlhomOrFIaA9LxkFRGpzWLgjXabZ74-riA7lUM-TXETskAHfWvAZiB91FrfYy0T23gGp4ButI4TK1zZ1RuYvTu6gxoPBAkHUVIpZwXBJ2pOTmi4ag3YvXg11AMGcZcJNAVDNm1FMUb6t_QZGRLucqrVJrtuJr-GwnzgdpQ";

  const handleGitHubSignin = (e) => {
    e.preventDefault();
    let provider = new GithubAuthProvider();
    // console.log("provider", provider);
    signInWithPopup(auth, provider).then((user) => {
      const { displayName, photoURL, email, uid } = user.user;
      user = {
        id: uid,
        fullName: displayName,
        image: photoURL,
        email,
      };
      console.log("USER", user);

      fetch("http://localhost:3000/api/signin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: uid,
          fullName: displayName,
          image: photoURL,
          email,
        }),
      });
    });
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Brats Next WeedShop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main_container}>
        <motion.div
          initial={{ translateX: "100%" }}
          animate={{ translateX: "0%" }}
          className={styles.overlay}
        >
          <img
            ref={weedRefOne}
            className={styles.overlay_img}
            src="./weed.webp"
            alt="weed_img"
          />
          <img
            ref={weedRefTwo}
            className={styles.overlay_img}
            src="./weedlight.jpeg"
            alt="weed_img"
          />
        </motion.div>
        <AnimatePresence>
          {!showReg && (
            <motion.div
              variants={fullDrop}
              initial="initial"
              animate="animate"
              exit="goodbye"
              className={styles.login_modal}
            >
              <form className={styles.login_form}>
                <div className={styles.form_div}>
                  <label htmlFor="username">Username:</label>
                  <input
                    type="text"
                    autoComplete="off"
                    name="username"
                    placeholder="username"
                    className={styles.form_control}
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                  />
                </div>
                <div className={styles.form_div}>
                  <label htmlFor="password">Password:</label>
                  <input
                    type="text"
                    autoComplete="off"
                    name="password"
                    placeholder="password"
                    className={styles.form_control}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
                <div className={styles.form_btn_div}>
                  <button
                    onClick={(e) => handleGitHubSignin(e)}
                    data-tip="Sign in with your Github Acct (Pays to be a Dev ðŸ˜Ž"
                    className={styles.github_btn}
                  >
                    <FaGithub />
                    {/* Github */}
                  </button>
                  <button
                    onClick={(e) => handleLogin(e)}
                    className={styles.login_btn}
                  >
                    Login
                  </button>
                  <p
                    onClick={(e) => setShowReg(!showReg)}
                    className={styles.p_link}
                  >
                    First time here?
                  </p>
                </div>
              </form>
            </motion.div>
          )}
        </AnimatePresence>
        <AnimatePresence>
          {showReg && (
            <motion.div
              variants={fullDrop}
              initial="initial"
              animate="animate"
              exit="goodbye"
              className={styles.register_modal}
            >
              <form className={styles.register_form}>
                <h3>Welcome new Smoker!</h3>
                <div className={styles.form_div}>
                  <label htmlFor="username">Username:</label>
                  <input
                    type="text"
                    name="username"
                    autoComplete="off"
                    placeholder="username"
                    className={styles.form_control}
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                  />
                </div>
                <div className={styles.form_div}>
                  <label htmlFor="email">Email:</label>
                  <input
                    type="text"
                    name="email"
                    autoComplete="off"
                    placeholder="email"
                    className={styles.form_control}
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
                <div className={styles.form_div}>
                  <label htmlFor="password">Password:</label>
                  <input
                    type="text"
                    name="password"
                    autoComplete="off"
                    placeholder="password"
                    className={styles.form_control}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
                <div className={styles.form_btn_div}>
                  <button
                    onClick={(e) => handleRegister(e)}
                    className={styles.login_btn}
                  >
                    Sign Up
                  </button>
                  <p
                    onClick={(e) => setShowReg(!showReg)}
                    className={styles.p_link}
                  >
                    Returning?
                  </p>
                </div>
              </form>
            </motion.div>
          )}
        </AnimatePresence>
      </main>
    </div>
  );
}
